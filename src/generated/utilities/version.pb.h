/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8-dev */

#ifndef PB_UTILITIES_VERSION_PB_H_INCLUDED
#define PB_UTILITIES_VERSION_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
/* *
 Version: Version information compliant with Semantic Versioning 2.0.0
 https://semver.org/ */
typedef struct _Version {
    uint32_t major;
    uint32_t minor;
    uint32_t patch;
    char prerelease[17];
    char build[17];
} Version;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define Version_init_default                     {0, 0, 0, "", ""}
#define Version_init_zero                        {0, 0, 0, "", ""}

/* Field tags (for use in manual encoding/decoding) */
#define Version_major_tag                        1
#define Version_minor_tag                        2
#define Version_patch_tag                        3
#define Version_prerelease_tag                   4
#define Version_build_tag                        5

/* Struct field encoding specification for nanopb */
#define Version_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   major,             1) \
X(a, STATIC,   SINGULAR, UINT32,   minor,             2) \
X(a, STATIC,   SINGULAR, UINT32,   patch,             3) \
X(a, STATIC,   SINGULAR, STRING,   prerelease,        4) \
X(a, STATIC,   SINGULAR, STRING,   build,             5)
#define Version_CALLBACK NULL
#define Version_DEFAULT NULL

extern const pb_msgdesc_t Version_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Version_fields &Version_msg

/* Maximum encoded size of messages (where known) */
#define Version_size                             54

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
